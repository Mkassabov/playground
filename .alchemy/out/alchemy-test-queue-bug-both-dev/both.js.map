{
  "version": 3,
  "sources": ["../../../deployments/alchemy-worker/src/both.ts"],
  "sourceRoot": ".alchemy/out/alchemy-test-queue-bug-both-dev",
  "sourcesContent": ["import type { both } from \"../../../alchemy.run\";\n\nexport default {\n\tasync fetch(request: Request, env: typeof both.Env): Promise<Response> {\n\t\tconst url = new URL(request.url);\n\t\tconst message = url.searchParams.get(\"message\");\n\n\t\tconsole.log(\"[BOTH] Received request with message:\", message);\n\n\t\tif (!message) {\n\t\t\tconsole.log(\"[BOTH] No message provided in query params\");\n\t\t\treturn new Response(\"Error: message query parameter is required\", {\n\t\t\t\tstatus: 400,\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tconst taskId = crypto.randomUUID();\n\n\t\t\tconsole.log(\"[BOTH] Adding message to queue with taskId:\", taskId);\n\n\t\t\tawait env.TASK_QUEUE.send({\n\t\t\t\ttaskId,\n\t\t\t\tdata: message,\n\t\t\t});\n\n\t\t\tconsole.log(\"[BOTH] Successfully added message to queue\");\n\n\t\t\treturn new Response(\n\t\t\t\tJSON.stringify({\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tmessage: \"Message added to queue\",\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t},\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tconsole.error(\"[BOTH] Error adding message to queue:\", error);\n\t\t\treturn new Response(\"Error adding message to queue\", { status: 500 });\n\t\t}\n\t},\n\t// biome-ignore lint/suspicious/useAwait: its fine\n\tasync queue(\n\t\tbatch: MessageBatch<{ taskId: string; data: unknown }>,\n\t\t_env: typeof both.Env,\n\t): Promise<void> {\n\t\tconsole.log(\n\t\t\t\"[BOTH] Processing batch with\",\n\t\t\tbatch.messages.length,\n\t\t\t\"messages\",\n\t\t);\n\n\t\tfor (const message of batch.messages) {\n\t\t\ttry {\n\t\t\t\tconsole.log(\"[BOTH] Processing message:\", {\n\t\t\t\t\ttaskId: message.body.taskId,\n\t\t\t\t\tdata: message.body.data,\n\t\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\t});\n\n\t\t\t\tconsole.log(\"[BOTH] Message data:\", message.body.data);\n\n\t\t\t\tmessage.ack();\n\t\t\t\tconsole.log(\"[BOTH] Message acknowledged successfully\");\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"[BOTH] Error processing message:\", error);\n\t\t\t\tmessage.retry();\n\t\t\t}\n\t\t}\n\t},\n};\n"],
  "mappings": ";AAEA,IAAO,eAAQ;AAAA,EACd,MAAM,MAAM,SAAkB,KAAyC;AACtE,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,UAAU,IAAI,aAAa,IAAI,SAAS;AAE9C,YAAQ,IAAI,yCAAyC,OAAO;AAE5D,QAAI,CAAC,SAAS;AACb,cAAQ,IAAI,4CAA4C;AACxD,aAAO,IAAI,SAAS,8CAA8C;AAAA,QACjE,QAAQ;AAAA,MACT,CAAC;AAAA,IACF;AAEA,QAAI;AACH,YAAM,SAAS,OAAO,WAAW;AAEjC,cAAQ,IAAI,+CAA+C,MAAM;AAEjE,YAAM,IAAI,WAAW,KAAK;AAAA,QACzB;AAAA,QACA,MAAM;AAAA,MACP,CAAC;AAED,cAAQ,IAAI,4CAA4C;AAExD,aAAO,IAAI;AAAA,QACV,KAAK,UAAU;AAAA,UACd,SAAS;AAAA,UACT;AAAA,UACA,SAAS;AAAA,QACV,CAAC;AAAA,QACD;AAAA,UACC,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAC/C;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,cAAQ,MAAM,yCAAyC,KAAK;AAC5D,aAAO,IAAI,SAAS,iCAAiC,EAAE,QAAQ,IAAI,CAAC;AAAA,IACrE;AAAA,EACD;AAAA;AAAA,EAEA,MAAM,MACL,OACA,MACgB;AAChB,YAAQ;AAAA,MACP;AAAA,MACA,MAAM,SAAS;AAAA,MACf;AAAA,IACD;AAEA,eAAW,WAAW,MAAM,UAAU;AACrC,UAAI;AACH,gBAAQ,IAAI,8BAA8B;AAAA,UACzC,QAAQ,QAAQ,KAAK;AAAA,UACrB,MAAM,QAAQ,KAAK;AAAA,UACnB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,QACnC,CAAC;AAED,gBAAQ,IAAI,wBAAwB,QAAQ,KAAK,IAAI;AAErD,gBAAQ,IAAI;AACZ,gBAAQ,IAAI,0CAA0C;AAAA,MACvD,SAAS,OAAO;AACf,gBAAQ,MAAM,oCAAoC,KAAK;AACvD,gBAAQ,MAAM;AAAA,MACf;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
