{"version":3,"sources":["../../../utils/nanoid.ts","patpat.ts"],"sourceRoot":".alchemy/out/bad-stack-trace-error-worker-bug","sourcesContent":["//* nanoid became runtime specific in v5; breaking support for cloudflare workers\n//* this is the same version as v5 but written to work w/ webcrypto instead of node:crypto\nconst POOL_SIZE_MULTIPLIER = 128;\nlet pool: Uint8Array;\nlet poolOffset: number;\n\nfunction fillPool(bytes: number) {\n  if (!pool || pool.length < bytes) {\n    pool = new Uint8Array(bytes * POOL_SIZE_MULTIPLIER);\n    crypto.getRandomValues(pool);\n    poolOffset = 0;\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.getRandomValues(pool);\n    poolOffset = 0;\n  }\n  poolOffset += bytes;\n}\n\nexport function idGenerator(alphabet: string, defaultSize: number) {\n  const mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1;\n  const step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length);\n\n  return (size = defaultSize) => {\n    // throw new Error(\"Error with good stack trace\");\n    let id = \"\";\n    while (true) {\n      fillPool(step);\n      const bytes = pool.subarray(poolOffset - step, poolOffset);\n      for (let i = 0; i < step; i++) {\n        // biome-ignore lint/style/noNonNullAssertion: we iterate down from step. will always exist\n        id += alphabet[bytes[i]! & mask] || \"\";\n        if (id.length === size) {\n          return id;\n        }\n      }\n    }\n  };\n}\n\nexport const DEFAULT_ALPHABET =\n  \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nexport const DEFAULT_LENGTH = 10;\nexport const id = idGenerator(DEFAULT_ALPHABET, DEFAULT_LENGTH);\n\nexport const HEX_ALPHABET = \"0123456789abcdef\";\nexport const HEX_LENGTH = 16;\nexport const hexId = idGenerator(HEX_ALPHABET, HEX_LENGTH);\n","import { id as nanoid } from \"../../../utils/nanoid\";\n\nexport default {\n  // biome-ignore lint/suspicious/useAwait: its fine\n  async fetch(): Promise<Response> {\n    const id = nanoid();\n    const message = `Haiii - patpat2! ${id}`;\n    // throw new Error(\"Error with bad stack trace\");\n    console.log(message);\n    return new Response(message);\n  },\n};\n"],"mappings":";;;;AAEA,IAAM,uBAAuB;AAC7B,IAAI;AACJ,IAAI;AAEJ,SAAS,SAAS,OAAe;AAC/B,MAAI,CAAC,QAAQ,KAAK,SAAS,OAAO;AAChC,WAAO,IAAI,WAAW,QAAQ,oBAAoB;AAClD,WAAO,gBAAgB,IAAI;AAC3B,iBAAa;AAAA,EACf,WAAW,aAAa,QAAQ,KAAK,QAAQ;AAC3C,WAAO,gBAAgB,IAAI;AAC3B,iBAAa;AAAA,EACf;AACA,gBAAc;AAChB;AAVS;AAYF,SAAS,YAAY,UAAkB,aAAqB;AACjE,QAAM,QAAQ,KAAM,KAAK,KAAK,MAAO,SAAS,SAAS,IAAK,CAAC,KAAM;AACnE,QAAM,OAAO,KAAK,KAAM,MAAM,OAAO,cAAe,SAAS,MAAM;AAEnE,SAAO,CAAC,OAAO,gBAAgB;AAE7B,QAAIA,MAAK;AACT,WAAO,MAAM;AACX,eAAS,IAAI;AACb,YAAM,QAAQ,KAAK,SAAS,aAAa,MAAM,UAAU;AACzD,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAE7B,QAAAA,OAAM,SAAS,MAAM,CAAC,IAAK,IAAI,KAAK;AACpC,YAAIA,IAAG,WAAW,MAAM;AACtB,iBAAOA;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAnBgB;AAqBT,IAAM,mBACX;AACK,IAAM,iBAAiB;AACvB,IAAM,KAAK,YAAY,kBAAkB,cAAc;AAEvD,IAAM,eAAe;AACrB,IAAM,aAAa;AACnB,IAAM,QAAQ,YAAY,cAAc,UAAU;;;AC5CzD,IAAO,iBAAQ;AAAA;AAAA,EAEb,MAAM,QAA2B;AAC/B,UAAMC,MAAK,GAAO;AAClB,UAAM,UAAU,oBAAoBA,GAAE;AAEtC,YAAQ,IAAI,OAAO;AACnB,WAAO,IAAI,SAAS,OAAO;AAAA,EAC7B;AACF;","names":["id","id"]}